{'TMP': 'C:\\Users\\Gongy\\AppData\\Local\\Temp', 'PCBRAND': 'alc', 'COMPUTERNAME': 'NCS-260313RT11', 'USERDOMAIN': 'NCS', 'BURN_AUTOPLAY': 'C:\\Program Files (x86)\\Roxio\\Roxio Burn\\', 'EMC_AUTOPLAY': 'C:\\Program Files (x86)\\Common Files\\Roxio Shared\\OEM\\', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 58 Stepping 9, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3a09', 'SYSTEMROOT': 'C:\\windows', 'PATH': 'C:/Users/Gongy/AppData/Local/Aptana Studio 3/jre/bin/client;C:/Users/Gongy/AppData/Local/Aptana Studio 3/jre/bin;C:/Users/Gongy/AppData/Local/Aptana Studio 3/jre/lib/i386;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Python27\\;C:\\Python27\\Scripts;c:\\Program Files (x86)\\Intel\\iCLS Client\\;c:\\Program Files\\Intel\\iCLS Client\\;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\windows\\system32;C:\\windows;C:\\windows\\System32\\Wbem;C:\\windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Common Files\\Roxio Shared\\DLLShared\\;C:\\Program Files\\Broadcom\\Broadcom 802.11;C:\\Program Files (x86)\\Common Files\\Roxio Shared\\OEM\\DLLShared\\;C:\\Program Files (x86)\\Common Files\\Roxio Shared\\OEM\\DLLShared\\;C:\\Program Files (x86)\\Common Files\\Roxio Shared\\OEM\\12.0\\DLLShared\\;C:\\Program Files (x86)\\Roxio\\OEM\\AudioCore\\;C:\\Program Files (x86)\\Intel\\Services\\IPT\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;c:\\Program Files (x86)\\Microsoft SQL Server\\100\\Tools\\Binn\\;c:\\Program Files (x86)\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Program Files\\ibm\\gsk8\\lib64;C:\\Program Files (x86)\\ibm\\gsk8\\lib;C:\\Program Files (x86)\\Nmap;C:\\Users\\Gongy\\AppData\\Local\\Aptana Studio 3;', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PT5HOME': 'C:\\Program Files (x86)\\Cisco Packet Tracer 5.3', 'DJANGO_SETTINGS_MODULE': 'TH.settings', 'TEMP': 'C:\\Users\\Gongy\\AppData\\Local\\Temp', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'PLATFORM': 'BNB', 'PYDEV_CONSOLE_ENCODING': 'UTF-8', 'LOCALAPPDATA': 'C:\\Users\\Gongy\\AppData\\Local', 'HOMEPATH': '\\Users\\Gongy', 'UATDATA': 'C:\\windows\\CCM\\UATData\\D9F8C395-CAB8-491d-B8AC-179A1FE1BE77', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'gongy', 'LOGONSERVER': '\\\\SGDC05', 'PROMPT': '$P$G', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'C:\\Users\\Gongy\\AppData\\Local\\Aptana Studio 3\\plugins\\org.python.pydev_3.0.0.1388187472\\pysrc\\pydev_sitecustomize;D:\\TH;C:\\Python27\\DLLs;C:\\Python27\\lib;C:\\Python27\\lib\\lib-tk;C:\\Python27;C:\\Python27\\lib\\site-packages;C:\\Python27\\lib\\site-packages\\PIL;C:\\Python27\\lib\\site-packages\\win32;C:\\Python27\\lib\\site-packages\\win32\\lib;C:\\Python27\\lib\\site-packages\\Pythonwin;C:\\Python27\\lib\\site-packages\\setuptools-0.6c11-py2.7.egg-info;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\PIL;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\setuptools-0.6c11-py2.7.egg-info;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\wx-2.8-msw-unicode;C:\\Python27\\lib\\site-packages\\wx-3.0-msw;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\csv2xls-0.4-py2.7.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\xlwt-0.7.5-py2.7.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\py2exe-0.9.2.2-py2.7-win32.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\requests-2.6.0-py2.7.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\paramiko-1.15.2-py2.7.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\crypto-1.4.1-py2.7.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\shellescape-3.4.1-py2.7.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\naked-0.1.31-py2.7.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\pyyaml-3.11-py2.7-win32.egg;C:\\Users\\Gongy\\AppData\\Roaming\\Python\\Python27\\site-packages\\netaddr-0.7.15-py2.7.egg', 'CLASSPATH': '.', 'USERDNSDOMAIN': 'NCS.CORP.INT-ADS', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.py;.pyw', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'APPDATA': 'C:\\Users\\Gongy\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'ONLINESERVICES': 'Online Services', 'PYDEV_COMPLETER_PYTHONPATH': 'C:\\Users\\Gongy\\AppData\\Local\\Aptana Studio 3\\plugins\\org.python.pydev_3.0.0.1388187472\\pysrc', 'NUMBER_OF_PROCESSORS': '4', 'PYTHONIOENCODING': 'UTF-8', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\Gongy'}